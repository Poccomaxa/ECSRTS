//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public NavigationApproachComponent navigationApproach { get { return (NavigationApproachComponent)GetComponent(GameComponentsLookup.NavigationApproach); } }
    public bool hasNavigationApproach { get { return HasComponent(GameComponentsLookup.NavigationApproach); } }

    public void AddNavigationApproach(float newRemainingDistance, float newTimeInPath) {
        var index = GameComponentsLookup.NavigationApproach;
        var component = CreateComponent<NavigationApproachComponent>(index);
        component.remainingDistance = newRemainingDistance;
        component.timeInPath = newTimeInPath;
        AddComponent(index, component);
    }

    public void ReplaceNavigationApproach(float newRemainingDistance, float newTimeInPath) {
        var index = GameComponentsLookup.NavigationApproach;
        var component = CreateComponent<NavigationApproachComponent>(index);
        component.remainingDistance = newRemainingDistance;
        component.timeInPath = newTimeInPath;
        ReplaceComponent(index, component);
    }

    public void RemoveNavigationApproach() {
        RemoveComponent(GameComponentsLookup.NavigationApproach);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherNavigationApproach;

    public static Entitas.IMatcher<GameEntity> NavigationApproach {
        get {
            if (_matcherNavigationApproach == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.NavigationApproach);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherNavigationApproach = matcher;
            }

            return _matcherNavigationApproach;
        }
    }
}
